{"kernel_name": "aligned-types", "parallel_api": "cuda", "code": {"main.cu": "\n\n\n\n\n\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <chrono>\n#include <cuda.h>\n\n\n\n\n\n\n\ntypedef unsigned char uchar_misaligned;\n\ntypedef unsigned short int ushort_misaligned;\n\ntypedef struct\n{\n  unsigned char r, g, b, a;\n} uchar4_misaligned;\n\ntypedef struct\n{\n  unsigned int l, a;\n} uint2_misaligned;\n\ntypedef struct\n{\n  unsigned int r, g, b;\n} uint3_misaligned;\n\ntypedef struct\n{\n  unsigned int r, g, b, a;\n} uint4_misaligned;\n\ntypedef struct\n{\n  uint4_misaligned c1, c2;\n}\nuint8_misaligned;\n\n\n\n\n\n\n\n\ntypedef struct __align__(4)\n{\n  unsigned char r, g, b, a;\n}\nuchar4_aligned;\n\ntypedef unsigned int uint_aligned;\n\ntypedef struct __align__(8)\n{\n  unsigned int l, a;\n}\nuint2_aligned;\n\ntypedef struct __align__(16)\n{\n  unsigned int r, g, b;\n}\nuint3_aligned;\n\ntypedef struct __align__(16)\n{\n  unsigned int r, g, b, a;\n}\nuint4_aligned;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntypedef struct __align__(16)\n{\n  uint4_aligned c1, c2;\n}\nuint8_aligned;\n\n\n\n\n\n\n\n\n\n\n\nint iDivUp(int a, int b)\n{\n  return (a % b != 0) ? (a / b + 1) : (a / b);\n}\n\n\n\nint iDivDown(int a, int b)\n{\n  return a / b;\n}\n\n\n\nint iAlignUp(int a, int b)\n{\n  return (a % b != 0) ? (a - a % b + b) : a;\n}\n\n\n\nint iAlignDown(int a, int b)\n{\n  return a - a % b;\n}\n\n\n\n\n\n\n\n\n\n\n\ntemplate<class TData> __global__ void testKernel(\n          TData *__restrict d_odata,\n    const TData *__restrict d_idata,\n    int numElements\n    )\n{\n  const int pos = blockDim.x * blockIdx.x + threadIdx.x;\n  if (pos < numElements)\n  {\n    d_odata[pos] = d_idata[pos];\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntemplate<class TData> int testCPU(\n    TData *h_odata,\n    TData *h_idata,\n    int numElements,\n    int packedElementSize\n    )\n{\n  for (int pos = 0; pos < numElements; pos++)\n  {\n    TData src = h_idata[pos];\n    TData dst = h_odata[pos];\n\n    for (int i = 0; i < packedElementSize; i++)\n      if (((char *)&src)[i] != ((char *)&dst)[i])\n      {\n        return 0;\n      }\n  }\n  return 1;\n}\n\n\n\n\n\n\n\n\n\n\n\nconst int       MEM_SIZE = 50000000;\nconst int NUM_ITERATIONS = 1000;\n\n\n\nunsigned char *h_idataCPU, *h_odataGPU;\n\n\n\ntemplate<class TData> int runTest(\n  unsigned char *d_idata,\n  unsigned char *d_odata,\n  int packedElementSize,\n  int memory_size)\n{\n  const int totalMemSizeAligned = iAlignDown(memory_size, sizeof(TData));\n  const int         numElements = iDivDown(memory_size, sizeof(TData));\n\n  \n\n  cudaMemset(d_odata, 0, memory_size);\n  \n\n  cudaDeviceSynchronize();\n\n  auto start = std::chrono::high_resolution_clock::now();\n  dim3 grid ((numElements + 255)/256);\n  dim3 block (256);\n  for (int i = 0; i < NUM_ITERATIONS; i++)\n  {\n    testKernel<TData><<<grid, block>>>(\n        (TData *)d_odata,\n        (TData *)d_idata,\n        numElements\n        );\n  }\n\n  cudaDeviceSynchronize();\n\n  auto end = std::chrono::high_resolution_clock::now();\n  std::chrono::duration<double> elapsed_seconds = end - start;\n  double gpuTime = (double)elapsed_seconds.count() / NUM_ITERATIONS;\n\n  printf(\n      \"Avg. time: %f ms / Copy throughput: %f GB/s.\\n\", gpuTime * 1000,\n      (double)totalMemSizeAligned / (gpuTime * 1073741824.0)\n        );\n\n  \n\n  cudaMemcpy(h_odataGPU, d_odata, memory_size, cudaMemcpyDeviceToHost);\n  int flag = testCPU(\n      (TData *)h_odataGPU,\n      (TData *)h_idataCPU,\n      numElements,\n      packedElementSize\n      );\n\n  printf(flag ? \"\\tTEST OK\\n\" : \"\\tTEST FAILURE\\n\");\n\n  return !flag;\n}\n\nint main(int argc, char **argv)\n{\n  int i, nTotalFailures = 0;\n\n  printf(\"[%s] - Starting...\\n\", argv[0]);\n\n  printf(\"Allocating memory...\\n\");\n  int   MemorySize = (int)(MEM_SIZE) & 0xffffff00; \n\n  h_idataCPU = (unsigned char *)malloc(MemorySize);\n  h_odataGPU = (unsigned char *)malloc(MemorySize);\n\n  unsigned char *d_idata;\n  unsigned char *d_odata;\n  cudaMalloc((void **)&d_idata, MemorySize);\n  cudaMalloc((void **)&d_odata, MemorySize);\n\n  printf(\"Generating host input data array...\\n\");\n\n  for (i = 0; i < MemorySize; i++)\n  {\n    h_idataCPU[i] = (i & 0xFF) + 1;\n  }\n\n  printf(\"Uploading input data to GPU memory...\\n\");\n  cudaMemcpy(d_idata, h_idataCPU, MemorySize, cudaMemcpyHostToDevice);\n\n  printf(\"Testing misaligned types...\\n\");\n  printf(\"uchar_misaligned...\\n\");\n  nTotalFailures += runTest<uchar_misaligned>(d_idata, d_odata, 1, MemorySize);\n\n  printf(\"uchar4_misaligned...\\n\");\n  nTotalFailures += runTest<uchar4_misaligned>(d_idata, d_odata, 4, MemorySize);\n\n  printf(\"uchar4_aligned...\\n\");\n  nTotalFailures += runTest<uchar4_aligned>(d_idata, d_odata, 4, MemorySize);\n\n  printf(\"ushort_misaligned...\\n\");\n  nTotalFailures += runTest<ushort_misaligned>(d_idata, d_odata, 2, MemorySize);\n\n  printf(\"uint_aligned...\\n\");\n  nTotalFailures += runTest<uint_aligned>(d_idata, d_odata, 4, MemorySize);\n\n  printf(\"uint2_misaligned...\\n\");\n  nTotalFailures += runTest<uint2_misaligned>(d_idata, d_odata, 8, MemorySize);\n\n  printf(\"uint2_aligned...\\n\");\n  nTotalFailures += runTest<uint2_aligned>(d_idata, d_odata, 8, MemorySize);\n\n  printf(\"uint3_misaligned...\\n\");\n  nTotalFailures += runTest<uint3_misaligned>(d_idata, d_odata, 12, MemorySize);\n\n  printf(\"uint3_aligned...\\n\");\n  nTotalFailures += runTest<uint3_aligned>(d_idata, d_odata, 12, MemorySize);\n\n  printf(\"uint4_misaligned...\\n\");\n  nTotalFailures += runTest<uint4_misaligned>(d_idata, d_odata, 16, MemorySize);\n\n  printf(\"uint4_aligned...\\n\");\n  nTotalFailures += runTest<uint4_aligned>(d_idata, d_odata, 16, MemorySize);\n\n  printf(\"uint8_misaligned...\\n\");\n  nTotalFailures += runTest<uint8_misaligned>(d_idata, d_odata, 32, MemorySize);\n\n  printf(\"uint8_aligned...\\n\");\n  nTotalFailures += runTest<uint8_aligned>(d_idata, d_odata, 32, MemorySize);\n\n  printf(\"\\n[alignedTypes] -> Test Results: %d Failures\\n\", nTotalFailures);\n\n  printf(\"Shutting down...\\n\");\n  cudaFree(d_idata);\n  cudaFree(d_odata);\n  free(h_odataGPU);\n  free(h_idataCPU);\n\n  if (nTotalFailures != 0)\n  {\n    printf(\"Test failed!\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  printf(\"Test passed\\n\");\n  exit(EXIT_SUCCESS);\n}\n"}}
{"kernel_name": "aligned-types", "parallel_api": "omp", "code": {"main.cpp": "\n\n\n\n\n\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <chrono>\n#include <omp.h>\n\n\n\n\n\n\n\ntypedef unsigned char uchar_misaligned;\n\ntypedef unsigned short int ushort_misaligned;\n\ntypedef struct\n{\n  unsigned char r, g, b, a;\n} uchar4_misaligned;\n\ntypedef struct\n{\n  unsigned int l, a;\n} uint2_misaligned;\n\ntypedef struct\n{\n  unsigned int r, g, b;\n} uint3_misaligned;\n\ntypedef struct\n{\n  unsigned int r, g, b, a;\n} uint4_misaligned;\n\ntypedef struct\n{\n  uint4_misaligned c1, c2;\n} uint8_misaligned;\n\n\n\n\n\n\n\n\ntypedef struct __attribute__((__aligned__(4)))\n{\n  unsigned char r, g, b, a;\n}\nuchar4_aligned;\n\ntypedef unsigned int uint_aligned;\n\ntypedef struct __attribute__((__aligned__(8)))\n{\n  unsigned int l, a;\n}\nuint2_aligned;\n\ntypedef struct __attribute__((__aligned__(16)))\n{\n  unsigned int r, g, b;\n}\nuint3_aligned;\n\ntypedef struct __attribute__((__aligned__(16)))\n{\n  unsigned int r, g, b, a;\n}\nuint4_aligned;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntypedef struct __attribute__((__aligned__(16)))\n{\n  uint4_aligned c1, c2;\n}\nuint8_aligned;\n\n\n\n\n\n\n\n\n\n\n\nint iDivUp(int a, int b)\n{\n  return (a % b != 0) ? (a / b + 1) : (a / b);\n}\n\n\n\nint iDivDown(int a, int b)\n{\n  return a / b;\n}\n\n\n\nint iAlignUp(int a, int b)\n{\n  return (a % b != 0) ? (a - a % b + b) : a;\n}\n\n\n\nint iAlignDown(int a, int b)\n{\n  return a - a % b;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntemplate<class TData> int testCPU(\n    TData *h_odata,\n    TData *h_idata,\n    int numElements,\n    int packedElementSize\n    )\n{\n  for (int pos = 0; pos < numElements; pos++)\n  {\n    TData src = h_idata[pos];\n    TData dst = h_odata[pos];\n\n    for (int i = 0; i < packedElementSize; i++)\n      if (((char *)&src)[i] != ((char *)&dst)[i])\n      {\n        return 0;\n      }\n  }\n  return 1;\n}\n\n\n\n\n\n\n\n\n\n\n\nconst int       MEM_SIZE = 50000000;\nconst int NUM_ITERATIONS = 1000;\n\n\n\nunsigned char *h_idataCPU;\n\ntemplate<class TData> int runTest(\n  unsigned char *d_idata,\n  unsigned char *d_odata,\n  int packedElementSize,\n  int memory_size)\n{\n  const int totalMemSizeAligned = iAlignDown(memory_size, sizeof(TData));\n  const int         numElements = iDivDown(memory_size, sizeof(TData));\n\n  \n\n  #pragma omp target teams distribute parallel for thread_limit(256)\n  for (int i = 0; i < memory_size; i++) \n    d_odata[i] = 0;\n  \n\n  \n\n  auto start = std::chrono::high_resolution_clock::now();\n  for (int i = 0; i < NUM_ITERATIONS; i++)\n  {\n    #pragma omp target teams distribute parallel for thread_limit(256)\n    for (int pos = 0; pos < numElements; pos++)\n    {\n      reinterpret_cast<TData*>(d_odata)[pos] = \n        reinterpret_cast<TData*>(d_idata)[pos];\n    }\n  }\n\n  auto end = std::chrono::high_resolution_clock::now();\n  std::chrono::duration<double> elapsed_seconds = end - start;\n  double gpuTime = (double)elapsed_seconds.count() / NUM_ITERATIONS;\n\n  printf(\n      \"Avg. time: %f ms / Copy throughput: %f GB/s.\\n\", gpuTime * 1000,\n      (double)totalMemSizeAligned / (gpuTime * 1073741824.0)\n        );\n\n  \n\n  #pragma omp target update from (d_odata[0:memory_size])\n\n  int flag = testCPU(\n      (TData *)d_odata,\n      (TData *)h_idataCPU,\n      numElements,\n      packedElementSize\n      );\n\n  printf(flag ? \"\\tTEST OK\\n\" : \"\\tTEST FAILURE\\n\");\n\n  return !flag;\n}\n\nint main(int argc, char **argv)\n{\n  int i, nTotalFailures = 0;\n\n  printf(\"[%s] - Starting...\\n\", argv[0]);\n\n  printf(\"Allocating memory...\\n\");\n  int   MemorySize = (int)(MEM_SIZE) & 0xffffff00; \n\n  h_idataCPU = (unsigned char *)malloc(MemorySize);\n  unsigned char *d_odata = (unsigned char *)malloc(MemorySize);\n\n  printf(\"Generating host input data array...\\n\");\n\n  for (i = 0; i < MemorySize; i++)\n  {\n    h_idataCPU[i] = (i & 0xFF) + 1;\n  }\n\n  printf(\"Uploading input data to GPU memory...\\n\");\n  unsigned char *d_idata = h_idataCPU;\n\n#pragma omp target data map(to: d_idata[0:MemorySize]) \\\n                        map(alloc: d_odata[0:MemorySize])\n{\n\n  printf(\"Testing misaligned types...\\n\");\n  printf(\"uchar_misaligned...\\n\");\n  nTotalFailures += runTest<uchar_misaligned>(d_idata, d_odata, 1, MemorySize);\n\n  printf(\"uchar4_misaligned...\\n\");\n  nTotalFailures += runTest<uchar4_misaligned>(d_idata, d_odata, 4, MemorySize);\n\n  printf(\"uchar4_aligned...\\n\");\n  nTotalFailures += runTest<uchar4_aligned>(d_idata, d_odata, 4, MemorySize);\n\n  printf(\"ushort_misaligned...\\n\");\n  nTotalFailures += runTest<ushort_misaligned>(d_idata, d_odata, 2, MemorySize);\n\n  printf(\"uint_aligned...\\n\");\n  nTotalFailures += runTest<uint_aligned>(d_idata, d_odata, 4, MemorySize);\n\n  printf(\"uint2_misaligned...\\n\");\n  nTotalFailures += runTest<uint2_misaligned>(d_idata, d_odata, 8, MemorySize);\n\n  printf(\"uint2_aligned...\\n\");\n  nTotalFailures += runTest<uint2_aligned>(d_idata, d_odata, 8, MemorySize);\n\n  printf(\"uint3_misaligned...\\n\");\n  nTotalFailures += runTest<uint3_misaligned>(d_idata, d_odata, 12, MemorySize);\n\n  printf(\"uint3_aligned...\\n\");\n  nTotalFailures += runTest<uint3_aligned>(d_idata, d_odata, 12, MemorySize);\n\n  printf(\"uint4_misaligned...\\n\");\n  nTotalFailures += runTest<uint4_misaligned>(d_idata, d_odata, 16, MemorySize);\n\n  printf(\"uint4_aligned...\\n\");\n  nTotalFailures += runTest<uint4_aligned>(d_idata, d_odata, 16, MemorySize);\n\n  printf(\"uint8_misaligned...\\n\");\n  nTotalFailures += runTest<uint8_misaligned>(d_idata, d_odata, 32, MemorySize);\n\n  printf(\"uint8_aligned...\\n\");\n  nTotalFailures += runTest<uint8_aligned>(d_idata, d_odata, 32, MemorySize);\n\n  printf(\"\\n[alignedTypes] -> Test Results: %d Failures\\n\", nTotalFailures);\n\n  printf(\"Shutting down...\\n\");\n}\n  free(d_odata);\n  free(h_idataCPU);\n\n  if (nTotalFailures != 0)\n  {\n    printf(\"Test failed!\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  printf(\"Test passed\\n\");\n  exit(EXIT_SUCCESS);\n}\n"}}
{"kernel_name": "aligned-types", "parallel_api": "serial", "code": {"main.cpp": "\n\n\n\n\n\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <chrono>\n\n\n\n\n\n\n\ntypedef unsigned char uchar_misaligned;\n\ntypedef unsigned short int ushort_misaligned;\n\ntypedef struct\n{\n  unsigned char r, g, b, a;\n} uchar4_misaligned;\n\ntypedef struct\n{\n  unsigned int l, a;\n} uint2_misaligned;\n\ntypedef struct\n{\n  unsigned int r, g, b;\n} uint3_misaligned;\n\ntypedef struct\n{\n  unsigned int r, g, b, a;\n} uint4_misaligned;\n\ntypedef struct\n{\n  uint4_misaligned c1, c2;\n} uint8_misaligned;\n\n\n\n\n\n\n\n\ntypedef struct __attribute__((__aligned__(4)))\n{\n  unsigned char r, g, b, a;\n}\nuchar4_aligned;\n\ntypedef unsigned int uint_aligned;\n\ntypedef struct __attribute__((__aligned__(8)))\n{\n  unsigned int l, a;\n}\nuint2_aligned;\n\ntypedef struct __attribute__((__aligned__(16)))\n{\n  unsigned int r, g, b;\n}\nuint3_aligned;\n\ntypedef struct __attribute__((__aligned__(16)))\n{\n  unsigned int r, g, b, a;\n}\nuint4_aligned;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntypedef struct __attribute__((__aligned__(16)))\n{\n  uint4_aligned c1, c2;\n}\nuint8_aligned;\n\n\n\n\n\n\n\n\n\n\n\nint iDivUp(int a, int b)\n{\n  return (a % b != 0) ? (a / b + 1) : (a / b);\n}\n\n\n\nint iDivDown(int a, int b)\n{\n  return a / b;\n}\n\n\n\nint iAlignUp(int a, int b)\n{\n  return (a % b != 0) ? (a - a % b + b) : a;\n}\n\n\n\nint iAlignDown(int a, int b)\n{\n  return a - a % b;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntemplate<class TData> int testCPU(\n    TData *h_odata,\n    TData *h_idata,\n    int numElements,\n    int packedElementSize\n    )\n{\n  for (int pos = 0; pos < numElements; pos++)\n  {\n    TData src = h_idata[pos];\n    TData dst = h_odata[pos];\n\n    for (int i = 0; i < packedElementSize; i++)\n      if (((char *)&src)[i] != ((char *)&dst)[i])\n      {\n        return 0;\n      }\n  }\n  return 1;\n}\n\n\n\n\n\n\n\n\n\n\n\nconst int       MEM_SIZE = 50000000;\nconst int NUM_ITERATIONS = 1000;\n\n\n\nunsigned char *h_idataCPU;\n\ntemplate<class TData> int runTest(\n  unsigned char *d_idata,\n  unsigned char *d_odata,\n  int packedElementSize,\n  int memory_size)\n{\n  const int totalMemSizeAligned = iAlignDown(memory_size, sizeof(TData));\n  const int         numElements = iDivDown(memory_size, sizeof(TData));\n\n  \n\n    for (int i = 0; i < memory_size; i++) \n    d_odata[i] = 0;\n  \n\n  \n\n  auto start = std::chrono::high_resolution_clock::now();\n  for (int i = 0; i < NUM_ITERATIONS; i++)\n  {\n        for (int pos = 0; pos < numElements; pos++)\n    {\n      reinterpret_cast<TData*>(d_odata)[pos] = \n        reinterpret_cast<TData*>(d_idata)[pos];\n    }\n  }\n\n  auto end = std::chrono::high_resolution_clock::now();\n  std::chrono::duration<double> elapsed_seconds = end - start;\n  double gpuTime = (double)elapsed_seconds.count() / NUM_ITERATIONS;\n\n  printf(\n      \"Avg. time: %f ms / Copy throughput: %f GB/s.\\n\", gpuTime * 1000,\n      (double)totalMemSizeAligned / (gpuTime * 1073741824.0)\n        );\n\n  \n\n  \n  int flag = testCPU(\n      (TData *)d_odata,\n      (TData *)h_idataCPU,\n      numElements,\n      packedElementSize\n      );\n\n  printf(flag ? \"\\tTEST OK\\n\" : \"\\tTEST FAILURE\\n\");\n\n  return !flag;\n}\n\nint main(int argc, char **argv)\n{\n  int i, nTotalFailures = 0;\n\n  printf(\"[%s] - Starting...\\n\", argv[0]);\n\n  printf(\"Allocating memory...\\n\");\n  int   MemorySize = (int)(MEM_SIZE) & 0xffffff00; \n\n  h_idataCPU = (unsigned char *)malloc(MemorySize);\n  unsigned char *d_odata = (unsigned char *)malloc(MemorySize);\n\n  printf(\"Generating host input data array...\\n\");\n\n  for (i = 0; i < MemorySize; i++)\n  {\n    h_idataCPU[i] = (i & 0xFF) + 1;\n  }\n\n  printf(\"Uploading input data to GPU memory...\\n\");\n  unsigned char *d_idata = h_idataCPU;\n\n{\n\n  printf(\"Testing misaligned types...\\n\");\n  printf(\"uchar_misaligned...\\n\");\n  nTotalFailures += runTest<uchar_misaligned>(d_idata, d_odata, 1, MemorySize);\n\n  printf(\"uchar4_misaligned...\\n\");\n  nTotalFailures += runTest<uchar4_misaligned>(d_idata, d_odata, 4, MemorySize);\n\n  printf(\"uchar4_aligned...\\n\");\n  nTotalFailures += runTest<uchar4_aligned>(d_idata, d_odata, 4, MemorySize);\n\n  printf(\"ushort_misaligned...\\n\");\n  nTotalFailures += runTest<ushort_misaligned>(d_idata, d_odata, 2, MemorySize);\n\n  printf(\"uint_aligned...\\n\");\n  nTotalFailures += runTest<uint_aligned>(d_idata, d_odata, 4, MemorySize);\n\n  printf(\"uint2_misaligned...\\n\");\n  nTotalFailures += runTest<uint2_misaligned>(d_idata, d_odata, 8, MemorySize);\n\n  printf(\"uint2_aligned...\\n\");\n  nTotalFailures += runTest<uint2_aligned>(d_idata, d_odata, 8, MemorySize);\n\n  printf(\"uint3_misaligned...\\n\");\n  nTotalFailures += runTest<uint3_misaligned>(d_idata, d_odata, 12, MemorySize);\n\n  printf(\"uint3_aligned...\\n\");\n  nTotalFailures += runTest<uint3_aligned>(d_idata, d_odata, 12, MemorySize);\n\n  printf(\"uint4_misaligned...\\n\");\n  nTotalFailures += runTest<uint4_misaligned>(d_idata, d_odata, 16, MemorySize);\n\n  printf(\"uint4_aligned...\\n\");\n  nTotalFailures += runTest<uint4_aligned>(d_idata, d_odata, 16, MemorySize);\n\n  printf(\"uint8_misaligned...\\n\");\n  nTotalFailures += runTest<uint8_misaligned>(d_idata, d_odata, 32, MemorySize);\n\n  printf(\"uint8_aligned...\\n\");\n  nTotalFailures += runTest<uint8_aligned>(d_idata, d_odata, 32, MemorySize);\n\n  printf(\"\\n[alignedTypes] -> Test Results: %d Failures\\n\", nTotalFailures);\n\n  printf(\"Shutting down...\\n\");\n}\n  free(d_odata);\n  free(h_idataCPU);\n\n  if (nTotalFailures != 0)\n  {\n    printf(\"Test failed!\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  printf(\"Test passed\\n\");\n  exit(EXIT_SUCCESS);\n}"}}